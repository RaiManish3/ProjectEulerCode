import time
start=time.time()

#######################################################################################
# ================================executi0n time:0.4s==================================

count=0
product=1
p=0

"""
	lets calculate the upperbound:
	digits=9*1+(100-10)*2+(1000-100)*3+so on
	=>digits=9*(1+20+300+...)
	=>digits=9*(...654321)
	computing merely 9*654321 gives 488889 which is nearly some less than half the reqd.
	that is generated by numbers below 100000
	so if we double this number we would get digits greater than reqd by a small margin.
"""

for x in xrange(1,200000):
	lst=list(str(x))
	digits=len(lst)

	if count+digits>p:
		for i in xrange(digits):
			count+=1

			if count==100:
				product*=int(lst[i])
				# print x,lst[i]
				p=1000

			if count==1000:
				product*=int(lst[i])
				# print x,lst[i]
				p=10000

			if count==10000:
				product*=int(lst[i])
				# print x,lst[i]	
				p=100000

			if count==100000:
				product*=int(lst[i])
				# print x,lst[i]
				p=1000000

			if count==1000000:
				product*=int(lst[i])
				# print x,lst[i]
				break

	else :
		count+=digits

	if count>=1000000:
		break

print product
print time.time()-start
